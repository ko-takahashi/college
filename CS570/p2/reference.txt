/*******************************************************************************
***************
3    Megan Chua cssc0025
4    p2.h: Serves as the header file to p2. Defines my global variables and
functions.
5   
********************************************************************************
***************/
6   
7    /*****************************
8    Define all include statements
9    ******************************/
10  #include "getword.h"
11  #include <stdio.h>
12  #include <signal.h>
13  #include <unistd.h>
14  #include <fcntl.h>
15  #include <stdlib.h>
16  #include <string.h>
17  #include <strings.h>
18  #include <limits.h>
19  #include <time.h>
20  #include <semaphore.h>
21  #include <assert.h>
22  #include <sys/types.h>
23  #include <sys/stat.h>
24  #include <sys/wait.h>
25  #include <dirent.h>
26  #include <errno.h>
27 
28  #define MAXITEM 100 //defines the maximum words per line
29  #define MAXSIZE 25500 //defines a buffer size large enough to store 255
words with 255 chars
30 
31  /**************************************************
32  Define global variables.
33  ***************************************************/
34  //pointer to each command and argument, newargv[0] holds exec command and
the rest holds the args
35  char *newargv[MAXITEM]; 
36  int newargvsize = 0; //counter for the number of commands and arguments
37  char *hist[MAXITEM]; //holds the previous command to execute when
encountering !!
38  char *outfile = NULL; //pointer for output redirection (>)
39  char *infile = NULL; //pointer for input redirection (<)
40  char *outerrfile = NULL; //pointer for stdout/stderr redirection (>&)
41  char *outerrcmd = ">&"; //variable used to strcmp to >& and flag it
42  int amp = 0; //flag for & metacharacter
43  int background = 0; //flag to detect if the process needs to be
backgrounded
44  int noprompt = 0; //flag when the prompt does not need to be called
45  int donecount = 0; //flag to detect the "done" terminator
46  int eofcount = 0; //flag to detect the "eof" terminator
47  char *bangbang = "!!"; //variable used to strcmp to "!!"
48  int bangcount = 0; //flag to detect !! metacharacter
49  int word, inCount, outCount, outerrCount, fileIn, fileOut, fileErr, err;
50  //the rest of the variables are explained in p2.c
51 
52 
/*******************************************************************************
***********
53  void sig: Signal Handler that catches SIGTERM on termination
54 
********************************************************************************
************/
55  void sig (int signum);
56 
57 
/*******************************************************************************
***********
58  void prompt: Prints out the prompt statement "%1%" whenever called
59 
********************************************************************************
************/
60  void prompt();
61 
62 
/*******************************************************************************
*****************
63  int parse: Calls my getword function in order to parse the input at stdin.
Parse creates flags for each metacharacter, keeps track of what getword returns
with (length), and pushes each word into newargv.
64 
********************************************************************************
****************/
65  int parse ();

1    #include "p2.h"
2   
/*******************************************************************************
3    Megan Chua cssc0025
4    Carroll CS570
5    Program 2 Due Date: 10/04/2019
6    References: listed in gradernotes file.
7   
8    p2 acts as a command line interpreter and a basic csh shell. It supports
input/output redirection, backgrounding, the !! operator, cd, and running a
script straight from the command line.
9   
*******************************************************************************/
10  void sig (int signum)
11  {
12 
13  }
14 
15  void prompt()
16  {
17      printf("%%1%% ");
18  }
19 
20  int main(int argc, char *argv[])
21  {
22      int kidpid; //variable to store the child process pid
23      char *home = getenv("HOME"); //variable used to chdir to Home with the
command cd
24      char *cd = "cd"; //variable used to strcmp to newargv and see if cd is
appropriate
25      int j = 0; //counter for the history for loop
26      int file; //stores the contents at argv[1] to run the script
27     
28      //setup the process group and call the signal catcher
29      setpgid(0,getpid());
30      signal(SIGTERM,sig);
31     
32 
/*******************************************************************************
33  The following if statement deals with the command line arguments. It first
checks to see if argc is greater than zero to check for a command. Then, if the
program is able to open the contents of argv[1], it will redirect the contents
to stdin. This will set up the script to be parsed in the next part of the
program and continue on with the shell.
34 
*******************************************************************************/
   
35      if (argc > 0)
36      {
37          if((file = open(argv[1],O_RDONLY)) != -1)
38          {
39              dup2(file,STDIN_FILENO);
40              close(file);
41          }
42     
43      }
44 
45      for(;;)
46      {
47 
48          word = newargvsize = amp = background = inCount = outCount =
fileIn = fileOut = err = 0; //clear each variable back to 0 at the beginning of
each loop to setup for next run
49 
50  /********************************
51  Checks if prompt should ouput to
52  terminal or if the prompt does not
53  need to be called
54  *********************************/
55          if (noprompt == 0)
56          {
57              prompt();
58          }
59 
60          else
61          {
62              noprompt = 0;
63          }
64  /********************************
65  Calls parse and breaks when it
66  encounters done, or end of file.
67  *********************************/
68 
69          if (parse() == -1)
70          {
71              break; 
72          }
73 
74          if (newargvsize == 0)
75          {
76              continue;
77          }
78 
79  /********************************
80  If the flag for !! was encountered,
81  then push the contents of history
82  into newargv and continue. The
83  function parse, defines what history
84  is.
85  *********************************/
86          if (bangcount == 1)
87          {
88 
89              for (j = 0; j <= newargvsize; j++)
90              {
91                  newargv[j] = hist[j];
92         
93              }
94               
95          }
96 
97  /********************************
98  Checks that each metacharacter
99  has enough arguments. Otherwise,
100  it prints an error message to stderr.
101  *********************************/
102          if ((inCount == 1 || outCount == 1 || outerrCount == 1) &&
newargvsize <= 2)
103          {
104              fprintf(stderr, "Redirect: Not enough arguments\n");
105              noprompt = 1;
106              continue;
107          }
108 
109  /********************************
110  Creates cases for different parse
111  error messages.
112  *********************************/
113          if (err != 0)
114          {
115              switch(err)
116              {
117                  case 1:
118                      fprintf(stderr, "Output Redirection: > is invalid\n");
119                      noprompt = 1;
120                      continue;
121                  case 2:
122                      fprintf(stderr, "Input Redirection: < is invalid\n");
123                      noprompt = 1;
124                      continue;
125                  case 3:
126                      fprintf(stderr, "Stderr Redirection: >& is invalid\n");
127                      noprompt = 1;
128                      continue;
129                  case 4:
130                      fprintf(stderr, "Backgrounding: & is invalid\n");
131                      noprompt = 1;
132                      continue;
133                  case 5:
134                      fprintf(stderr, "Invalid syntax\n");
135                      noprompt = 1;
136                      continue;
137              }
138          }
139 
140  /********************************
141  Deals with the cd command. Checks
142  if the number of arguments is 2 and
143  if newargv[0] is cd. If so, chdir
144  to home. Otherwise, print an error
145  message.
146  *********************************/
147          if (newargvsize == 2)
148          {
149              if (strcmp(newargv[0],cd) == 0)
150              {
151             
152                  if (chdir(home) == -1)
153                  {
154                      perror("Directory not found");
155                      noprompt = 1;
156                      continue;
157                  }
158 
159                  continue;
160              }
161          }
162     
163  /********************************
164  This deals with cd with arguments
165  by checking for the number arguments
166  and changing directories to newargv[1].
167  *********************************/
168          if (newargvsize >= 3)
169          {
170              if (strcmp(newargv[0],cd) == 0)
171              {
172             
173                  if (newargvsize >= 4)
174                  {
175                      fprintf(stderr, "Too many arguments\n");
176                      noprompt = 1;
177                      continue;
178                  }
179         
180 
181                  if (chdir(newargv[1]) == -1)
182                  {
183                      perror("Directory not found");
184                      noprompt = 1;
185                      continue;
186                  }
187         
188         
189          continue;
190              }
191          } //end cd
192 
193  /********************************
194  Clear out the contents of stdin
195  and stderr to ensure there are no
196  repeat of outputs.
197  *********************************/
198          fflush(stdin);
199          fflush(stderr);
200 
201 
202 
/*******************************************************************************
****************
203  If it reaches this statement, then we have to fork a child in order to
execute the command at newargv[0]. If the fork is successful, then check the
flags for input/output redirection. In order to redirect, we open the contents
at the output or input pointer (outfile/infile).
204 
205  If outerrCount: This detects >& to redirect both stdout and stderr. In
order to do this, I open the outfile pointer with read and write access. Then I
dup2 both stdout and stderr in order to do the redirection.
206 
207  If outcount: This detects > to do output redirection.
208 
209  If incount: This detects < to do input redirection.
210 
211  If !incount and background is true: Redirect to /dev/null
212 
213  After all the redirection is done, execvp newargv[0] to execute the
command.
214 
215  If any of these fail, then they will error out with the function perror
and exit codes.
216 
********************************************************************************
****************/
217          if ((kidpid=fork()) == -1)
218          {
219              perror("Cannot fork");
220              _exit(1);
221          }
222 
223          if (kidpid == 0)
224          {
225              if (outerrCount == 1) //>&
226              {
227                  if ((fileOut = open(outfile, O_CREAT | O_EXCL | O_WRONLY,
S_IRUSR | S_IWUSR)) == -1) //create the file with read and write permissions
228                  {
229                      perror("Failed to open");
230                      _exit(1);
231                  }
232 
233                  if (dup2(fileOut, STDOUT_FILENO) == -1)
234                  {
235                      perror("Can't redirect");
236                      _exit(1);
237                  }
238         
239                  if (dup2(fileOut,STDERR_FILENO) == -1)
240                  {
241                      perror("Can't redirect");
242                      _exit(1);
243                  }
244 
245                  close(fileOut);
246 
247              } //end >&
248 
249              if (outCount == 1) //>
250              {
251                  if ((fileOut = open(outfile, O_CREAT | O_EXCL | O_WRONLY,
S_IRUSR | S_IWUSR)) == -1)
252                  {
253                      perror("Failed to open");
254                      _exit(1);
255                  }
256 
257                  if (dup2(fileOut, STDOUT_FILENO) == -1)
258                  {
259                      perror("Can't redirect");
260                      _exit(1);
261                  }
262 
263                  close(fileOut);
264              } // end >
265 
266              if (inCount == 1) //<
267              {
268                  if ((fileIn = open(infile, O_RDONLY)) == -1)
269                  {
270                      perror("Failed to open");
271                      _exit(1);
272                  }
273 
274                  if (dup2(fileIn, STDIN_FILENO) == -1)
275                  {
276                      perror("Can't redirect");
277                      _exit(1);
278                  }
279 
280                  close(fileIn);
281              } //end <
282 
283              //ensure that background jobs cannot read from terminal
284              if (infile == NULL && background == 1)
285              {
286                  if ((fileIn = open("/dev/null",O_RDONLY)) == -1)
287                  {
288                      perror("Failed to open");
289                      _exit(1);
290                  }
291                 
292                  if (dup2(fileIn, STDIN_FILENO) == -1)
293                  {
294                      perror("Can't redirect");
295                      _exit(1);
296                  }
297             
298                  close(fileIn);
299              }
300 
301              execvp(newargv[0],newargv);
302              fprintf (stderr,"%s: Command cannot execute\n", newargv[0]);
303              _exit(9);
304         
305 
306 
307          } //end of fork
308  /***********************************************
309  If the argument does not fork, wait for the child
310  to complete and also check for background process.
311  Print out the pid of the child if background
312  is true.
313  **********************************************/       
314            else
315            {
316              if (background!=1)
317              {
318                  while(wait(NULL) != kidpid);
319              }   
320 
321              if (background == 1)
322              {
323                  printf("%s [%d]\n", newargv[0], kidpid);
324              }
325            } 
326         
327      } //end for loop
328 
329  /***********************************************
330  Once it reaches this point, kill the signal
331  and terminate p2. Exit 0 to exit successfully.
332  *********************************************/
333      killpg(getpgrp(),SIGTERM);
334      printf("p2 terminated.\n");
335      exit(0);
336  } //end of main
337 
338 
339  int parse()
340  {
341      char c[MAXSIZE]; //char storage to hold max amount of character
342      char *done = "done"; //variable to compare to newargv and see if it is
the done terminator
343      char *w = c; //point w at the char storage in order to push into
getword
344      int meta = 0; //counter for metacharacters in order to see when there
are too many metas
345      outCount = 0; //flag for > meta
346      inCount = 0; //flag for < meta
347      outerrCount = 0; //flag for >&
348      err = 0; //keeps track of which parse error code to print out
349      newargvsize = 0; //keeps track of number of arguments in newargv
350      amp = 0; //flag for & meta
351      background = 0; //flag for if we need to background the process
352      word = 0; //stores what is returned from getword
353      donecount = 0; //flag to track the done terminator
354      eofcount = 0; //flag to track the eof terminator
355      outfile = infile = outerrfile = NULL; //clear the redirection pointers
356     
357   
358      for(;;)
359      {
360          word = getword(w);
361 
362          //checks for multiple metacharacters in newargv; if so print an
error code
363          if (meta == 1)
364          {
365              if (*w == '>' || *w == '<' || *w == '&' || strcmp(w,outerrcmd)
== 0)
366              {
367                  err = 5;
368                  meta--;
369                  break;
370              }
371          }
372 
373          //if > is detected, then set the flag and push the outfile pointer
into w
374          if (*w == '>' && word == 1)
375          {
376              if (outCount == 1)
377              {
378                  err = 1;
379                  break;
380              }
381 
382              outCount++;
383              w = w + word + 1;
384              outfile = w;
385              meta++;
386          }
387     
388          //if < is detected, then set the flag and push the infile pointer
into w
389          else if (*w == '<' && word == 1)
390          {
391              if (inCount == 1)
392              {
393                  err = 2;
394                  break;
395              }
396 
397              inCount++;
398              w = w + word + 1;
399              infile = w;
400              meta++;
401          }
402 
403          //if >& is detected, then set the flag and push the outfile
pointer into w
404          else if (strcmp(w,outerrcmd) == 0)
405          {
406              if (outerrCount == 1)
407              {
408                  err = 3;
409                  break;
410              }
411 
412              outerrCount++;
413              w = w + word + 1;
414              outfile = w;
415              meta++;
416          }
417     
418          //check for !! at the beginning of the sentence, flag it, and
break out of the loop
419          else if (strcmp(w,bangbang) == 0 && newargvsize == 0)
420          {
421              bangcount++;
422              break;
423          }
424 
425          //check for the & meta, and set flag to check for backgrounding
process in next if statement
426          else if (*w == '&' && word == 1)
427          {
428              if (amp == 2)
429              {
430                  err = 4;
431                  break;
432                  newargvsize++;
433              }
434 
435              amp++;
436              newargv[newargvsize] = w;
437              if (bangcount == 0)
438              {
439                  hist[newargvsize] = strdup(w);
440         
441              }
442              w = w + word + 1;
443              newargvsize++;
444             
445          }
446     
447          //if the amp flag is set and getword returns anything less than or
equal to 0 then that means & was encountered at the end of the line, so set the
backgrounding flag
448          else if (amp == 1 && word <= 0)
449          {
450              background++;
451              break;
452          }
453 
454          //skip pushing the metacharacter into newargv and just increment
the w pointer
455          else if (meta == 1)
456          {
457              w = w + word + 1;
458              meta = 0;
459          }
460     
461          //checks if done is encountered at the beginning of the line, if
so break out of the loop and set the flag
462          else if (strcmp(w,done) == 0 && newargvsize == 0)
463          {
464              donecount++;
465              break;
466          } 
467     
468          //if done is not encountered at the beginning, then set the length
to 4 and push the word into newargv
469          else if (strcmp(w,done) == 0 && newargvsize != 0)
470          {
471              word = 4;
472              newargv[newargvsize] = w;
473              if (bangcount == 0)
474              {
475                  hist[newargvsize] = strdup(w);
476         
477              }
478              w = w + word + 1;
479              newargvsize++; 
480          }
481 
482          //If an EOF is encountered with 0 arguments, then set the flag
483          else if (word == -1 && newargvsize == 0)
484          {
485              eofcount++;
486              break;
487          }
488 
489          //push the word into newargv and move the pointer over accordingly
490          else
491          {
492              newargv[newargvsize] = w;
493              if (bangcount == 0)
494              {
495                  hist[newargvsize] = strdup(w);
496         
497              }
498              w = w + word + 1;
499              newargvsize++;
500              amp = 0;
501          }
502         
503          //if EOF is encountered but there are commands, then set length to
1 and break
504 
505          if (word == -1 && newargvsize != 0)
506          {
507              word = 1;
508              break;
509          }
510          //break out of loop when getword returns anything less than or
equal to 0
511          if (word <= 0 && donecount == 0 && eofcount == 0)
512          {
513              break;
514          }
515 
516 
517      } //end loop
518 
519      //null terminate the last word in newargv and return length to main
520     
521      newargv[newargvsize - 1] = '\0'; 
522      return word;
523   
524 
525  }